Index: app/Models/CustemRelation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Models/CustemRelation.php	(revision 03ef89fed39cf106d8441b497c525f4085ca074f)
+++ app/Models/CustemRelation.php	(revision 03ef89fed39cf106d8441b497c525f4085ca074f)
@@ -0,0 +1,13 @@
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Model;
+
+class CustemRelation extends Sximo
+{
+    protected $table = 'custem_relations';
+    protected $primaryKey = 'id';
+    protected $fillable = ['related_id','related_to','related_type','related_type_to','is_excluded'];
+    //
+}
Index: app/Models/Sximo.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Models/Sximo.php	(revision 121845ebc15d85df53815626146296008d2fb577)
+++ app/Models/Sximo.php	(revision 03ef89fed39cf106d8441b497c525f4085ca074f)
@@ -1606,4 +1606,80 @@
     public function isTypeRestrictedModule($moduleName){
         return in_array($moduleName,self::MODULES_WITH_RESTRICTED_TYPES);
     }
+
+    /**
+     * @param Integer | array $related_id
+     * @param string $related_type
+     * @param string $related_type_to
+     * @param int $is_excluded 1 | 0
+     * @return collection
+     */
+    public function getCustomRelationRecords($related_id , $related_type , $related_type_to , $is_excluded = 0)
+    {
+
+        $related_id = is_array($related_id) ? $related_id : [$related_id];
+
+        $relatedType = explode("\\", $related_type);
+        $relatedIdAs = "related_id as " . strtolower($relatedType[count($relatedType) - 1]) . "_id";
+        $relatedTypeTo = explode("\\", $related_type_to);
+        $relatedToAs = "related_to as " . strtolower($relatedTypeTo[count($relatedTypeTo) - 1] ). "_id";
+        $customRelation = CustemRelation::select('id', $relatedIdAs, $relatedToAs, 'is_excluded', 'created_at', 'updated_at')
+            ->whereIn('related_id', $related_id)->orWhereIn('related_to', $related_id);
+
+        $result = $customRelation->whereIn('related_type', [$related_type, $related_type_to])
+            ->whereIn('related_type_to', [$related_type, $related_type_to])
+            ->where('is_excluded',$is_excluded)->get();
+        return $result;
+    }
+
+    /**
+     * @param $related_id
+     * @param $related_to
+     * @param $related_type
+     * @param $related_type_to
+     * @param int $is_excluded
+     * @return bool
+     */
+    public function insertCustomRelation($related_id ,$related_to, $related_type , $related_type_to , $is_excluded = 0)
+    {
+
+        if (!empty($related_id) && !empty($related_to)  && !empty($related_type) &&
+            !empty($related_type_to) && ($is_excluded == 1 || $is_excluded == 0)){
+
+            $customRelation = new CustemRelation();
+            $relationData = [
+                'related_id'=>$related_id,
+                'related_to' => $related_to,
+                'related_type'=>$related_type,
+                'related_type_to'=>$related_type_to,
+                'is_excluded' => $is_excluded,
+            ];
+            $result  = $customRelation->create($relationData) ? true:false;
+            return $result;
+        }
+        return false;
+    }
+
+    /**
+     * @param $related_type
+     * @param $related_type_to
+     * @param int $is_excluded
+     * @param int $related_id
+     * @param int $related_to
+     * @return bool
+     */
+    public function destroyCustomRelation($related_type , $related_type_to , $is_excluded = 0, $related_id = 0,$related_to = 0){
+        $customRelation = CustemRelation::where('related_type', $related_type)
+            ->where('related_type_to',  $related_type_to)
+            ->where('is_excluded',$is_excluded);
+
+        if($related_id > 0){
+            $customRelation->where('related_id',$related_id)->orWhere('related_to',$related_id);
+        }
+        if($related_to > 0){
+            $customRelation->where('related_id',$related_to)->orWhere('related_to',$related_to);
+        }
+       $result =  $customRelation->delete() ? true:false;
+        return $result;
+    }
 }
Index: database/migrations/2018_09_18_065505_create_custem_relations_table.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/migrations/2018_09_18_065505_create_custem_relations_table.php	(revision 03ef89fed39cf106d8441b497c525f4085ca074f)
+++ database/migrations/2018_09_18_065505_create_custem_relations_table.php	(revision 03ef89fed39cf106d8441b497c525f4085ca074f)
@@ -0,0 +1,35 @@
+<?php
+
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Database\Migrations\Migration;
+
+class CreateCustemRelationsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('custem_relations', function (Blueprint $table) {
+            $table->increments('id');
+            $table->integer('related_id');
+            $table->integer('related_to');
+            $table->string('related_type');
+            $table->string('related_type_to');
+            $table->integer('is_excluded')->default('0');
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::drop('custem_relations');
+    }
+}
